pragma solidity ^0.8.4;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/interfaces/IERC721.sol";

/**
 * @title TokenVesting
 * @dev The vesting contract that makes the $TOKEN token claimable in a linear fashion based the Nft NFT contract.
 * Vesting is based on block.timestamp and the vesting timespan. Claims are dependent on the Nft that are owned
 * by a particular address
 */

contract TokenVesting is Ownable, ReentrancyGuard {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    /**
     * @dev Claim event for $TOKEN. Based on single NFT
     */
    event ClaimedToken(
        address owner,
        uint256 total,
        uint256 token,
        uint256 tokenAmount
    );

    /**
     * @dev Claim event for $TOKEN. Based on single array of NFTs
     */
    event ClaimedTokens(
        address owner,
        uint256 total,
        uint256[] tokens,
        uint256[] tokenAmounts
    );

    uint256 public cliff;
    uint256 public start;
    uint256 public duration;

    uint256 public tokenAvailable;
    uint256 public totalAvailable;

    IERC20 public immutable Token;
    IERC721 public immutable Nft;

    mapping(uint256 => uint256) public tokenClaimed;

    /**
     * @dev Sets the values for {duration}, {cliff}, {start}, {totalAvailable}, {tokenAvailable}, {Token} and {Nft}.
     *
     * @param _start: unix time of the start of $TOKEN vesting
     * @param _cliff: delayed start of $TOKEN vesting in seconds
     * @param _duration: timespan of $TOKEN vesting in seconds
     * @param _totalAvailable: total available supply of the $TOKEN token
     * @param _Token: contract address of the $TOKEN ERC20 contract
     * @param _Nft: interface of the Nft NFT contract
     */
    constructor(
        uint256 _start,
        uint256 _cliff,
        uint256 _duration,
        uint256 _totalAvailable,
        IERC20 _Token,
        IERC721 _Nft
    ) {
        duration = _duration;
        cliff = _start.add(_cliff);
        start = _start;

        totalAvailable = _totalAvailable;
        tokenAvailable = _totalAvailable.div(10000);

        Token = _Token;
        Nft = _Nft;
    }

    /**
     * @dev Claims the $TOKEN tokens available for claim for the msg.sender.
     *
     * Claim is a linear devision of the claimable amount and vesting timespan
     * Claim is per owned NFT
     * Claim also claims the unclaimed $TOKEN
     */
    function claim(uint256[] memory tokenIds) external nonReentrant {
        uint256 tokenId;
        uint256 nftCount;

        uint256 claimed;
        uint256 available;

        uint256 claimAmount;
        uint256 availableClaim;

        claimAmount = 0;

        nftCount = Nft.balanceOf(msg.sender);

        if (nftCount == 0) {
            uint256[] memory tokens = new uint256[](0);
            uint256[] memory tokenAmounts = new uint256[](0);

            emit ClaimedTokens(msg.sender, claimAmount, tokens, tokenAmounts);
        } else {
            uint256[] memory tokens = new uint256[](nftCount);
            uint256[] memory tokenAmounts = new uint256[](nftCount);

            for (uint256 i = 0; i < tokenIds.length; i++) {
                tokenId = tokenIds[i];

                tokens[i] = tokenId;
                claimed = tokenClaimed[tokenId];

                if (block.timestamp >= start.add(duration)) {
                    available = tokenAvailable;
                } else {
                    available = tokenAvailable
                        .mul(block.timestamp.sub(start))
                        .div(duration);
                }

                if (claimed == 10_000e18 || claimed > available) {
                    availableClaim = 0;
                } else {
                    availableClaim = available.sub(claimed);
                }

                tokenAmounts[i] = availableClaim;

                claimAmount += availableClaim;
                tokenClaimed[tokenId] += availableClaim;
            }

            Token.safeTransfer(msg.sender, claimAmount);

            emit ClaimedTokens(msg.sender, claimAmount, tokens, tokenAmounts);
        }
    }

    /**
     * @dev Claims the $TOKEN tokens available for an individual NFT
     *
     * Claim is a linear devision of the claimable amount and vesting timespan
     * Claim is per owned NFT
     * Claim also claims the unclaimed $TOKEN
     */
    function claimToken(uint256 tokenId) external nonReentrant {
        uint256 claimed;
        uint256 available;

        uint256 claimAmount;
        uint256 availableClaim;

        require(
            msg.sender == Nft.ownerOf(tokenId),
            "Sender is not owner of NFT"
        );

        claimed = tokenClaimed[tokenId];

        if (block.timestamp >= start.add(duration)) {
            available = tokenAvailable;
        } else {
            available = tokenAvailable.mul(block.timestamp.sub(start)).div(
                duration
            );
        }

        if (claimed == 10_000e18 || claimed > available) {
            availableClaim = 0;
        } else {
            availableClaim = available.sub(claimed);
        }

        claimAmount = availableClaim;
        tokenClaimed[tokenId] += availableClaim;

        Token.safeTransfer(msg.sender, claimAmount);

        emit ClaimedToken(msg.sender, claimAmount, tokenId, claimAmount);
    }

    /**
     * @dev Gets the total claim available of an address
     *
     * Claim is a linear devision of the claimable amount and vesting timespan
     * Claim is per owned NFT
     * Claim also claims the unclaimed $TOKEN
     */
    function claimAvailable(address owner, uint256[] memory tokenIds) public view returns (uint256) {
        uint256 tokenId;
        uint256 nftCount;

        uint256 claimed;
        uint256 available;

        uint256 claimAmount;
        uint256 availableClaim;

        claimAmount = 0;

        nftCount = Nft.balanceOf(owner);

        if (nftCount == 0) {
            return claimAmount;
        } else {
            for (uint256 i = 0; i < tokenIds.length; i++) {
                tokenId = tokenIds[i];

                claimed = tokenClaimed[tokenId];

                if (block.timestamp >= start.add(duration)) {
                    available = tokenAvailable;
                } else {
                    available = tokenAvailable
                        .mul(block.timestamp.sub(start))
                        .div(duration);
                }

                if (claimed == 10_000e18 || claimed > available) {
                    availableClaim = 0;
                } else {
                    availableClaim = available.sub(claimed);
                }

                claimAmount += availableClaim;
            }

            return claimAmount;
        }
    }

    /**
     * @dev Gets the total claim available of an individual NFT
     *
     * Claim is a linear devision of the claimable amount and vesting timespan
     * Claim is per owned NFT
     * Claim also claims the unclaimed $TOKEN
     */
    function claimAvailableToken(uint256 tokenId) public view returns (uint256) {
        uint256 claimed;
        uint256 available;

        uint256 availableClaim;

        if (block.timestamp >= start.add(duration)) {
            available = tokenAvailable;
        } else {
            available = tokenAvailable.mul(block.timestamp.sub(start)).div(
                duration
            );
        }

        if (tokenId < 1 || tokenId > 10000) {
            availableClaim = 0;
        } else {
            claimed = tokenClaimed[tokenId];

            if (claimed == 10_000e18 || claimed > available) {
                availableClaim = 0;
            } else {
                availableClaim = available.sub(claimed);
            }
        }

        return availableClaim;
    }
}
